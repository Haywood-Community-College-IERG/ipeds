---
title: "IPEDS Human Resources"
#format: pdf
format: html
#  docx:
#    highlight-style: github
params:
    report_code: "HR1"
    write_output: TRUE
    test: TRUE
    cleanup: FALSE
    current_datetime: ""
    report_year: ""
    report_data_term: ""

---

```{r setup}
#| echo: false
#| include: false

source("_packages.r")

report_year_data_adjustment <- 0

source("_setup.r")

```

---
date: "`r current_date`"
---

```{r define-variables}
#| echo: false
#| include: false

###
### Define some local variables
###
max_date = ymd( "9999-12-31" )

report_cutoff_day <- 1
report_cutoff_month <- 11

# We get one additional year if we need change from last year
report_year_data_start <- report_year
#report_year_data_end <- report_year - (dplyr::if_else( include_current_ay, 0, 1 ))

report_term <- str_c(report_year, "FA")
report_cohort <- str_c(report_year, "FT")

hripeds_credit_categ_list <- c("C","N")
hripeds_credit_categ_rules <- c("CREDIT","NONCRED")
hripeds_default_credit_categ <- "" # Default Credit Category
hripeds_faculty_class <- c("2") # Faculty Classification
hripeds_ft_statuses <- c("FT")
hripeds_meds_values <- ""
hripeds_medical_ind <- "N"
# New hires are from 11/01 - 10/31
hripeds_nh_start_day <- 1 # New Hire Start Day
hripeds_nh_start_month <- 11 # New Hire Start Month
hripeds_nh_end_day <- 31 # New Hire End Day
hripeds_nh_end_month <- 10 # New Hire End Month
hripeds_pos_medical <- ""
hripeds_pt_statuses <- c("PT","PTB","PTT")
hripeds_tenure_system <- "N"

report_year_date <- ymd( str_c(report_year, report_cutoff_month, report_cutoff_day, sep='-') )
new_hire_start_date <- ymd( str_c(report_year-1, hripeds_nh_start_month, hripeds_nh_start_day, sep='-') )
new_hire_end_date <- ymd( str_c(report_year, hripeds_nh_end_month, hripeds_nh_end_day, sep='-') )
courses_start_date <- ymd( str_c(report_year-1, report_cutoff_month, report_cutoff_day, sep='-') )
courses_end_date <- ymd( str_c(report_year, report_cutoff_month, report_cutoff_day, sep='-') ) - days(1)

validation_tables <- c("ALIEN.STATUSES",
                        "APPOINTMENT.REASONS",
                        "CLASSIFICATIONS",
                       "EEO.RPT.RANKS",
                        "EEO.RPT.CLASSES",
                       "HR.STATUSES",
                       "IPEDS.CONTRACT.TYPES",
                       "IPEDS.FUNCTIONS",
                       "IPEDS.OCCUP.CATEGS",
                        "N99.ACAD.LEVELS",
                       "PERSON.ETHNICS",
                       "PERSON.RACES",
                        "POSITION.ENDING.REASONS",
                        "POSITION.TYPES",
                        "STATUS.ENDING.REASONS",
                       "TENURE.TYPES",
                       "TIME.UNITS")

#fn_output <- str_c("ipeds_",report_year + adjustment,"_",fn_report_code,"_",report_time_str,".txt")
```

---
subtitle: "Report term: `r report_term`"
---

```{r get-data}
#| echo: false
#| include: false

#######################################
#
# HERE IS WHERE THE DATA IS RETRIEVED
#
#######################################

#
# Get terms data from DB
#
terms <- getColleagueData( "Term_CU", schema = "dw_dim" ) %>%
    select( Term_ID,
            Term_Index,
            Term_Name = Semester,
            Semester = Term_Abbreviation,
            Term_Start_Date,
            Term_Census_Date,
            Term_End_Date,
            Term_Reporting_Year = Reporting_Year,
            Academic_Year ) %>%
    collect() %>%
    mutate( Term_Reporting_Year = as.integer(Term_Reporting_Year) - 1 )

reporting_terms <- terms %>%
    filter( Term_Reporting_Year == report_year,
            Semester == "FA" )


##
## Create staging data for building the full Personnel table
##
pospay <- getColleagueData( "POSPAY" ) %>% 
    select( Pospay_ID = POSPAY.ID,
            Pospay_Regular_ET = POSPAY.REGULAR.ET,
            Pospay_Start_Date = POSPAY.START.DATE,
            Pospay_End_Date = POSPAY.END.DATE ) %>% 
    filter( Pospay_Start_Date <= new_hire_end_date,
            coalesce(Pospay_End_Date,local(report_year_date)) >= new_hire_start_date ) %>% 
    collect()
    
position__all_pospay <- getColleagueData( "POSITION__ALL_POSPAY", version="all" ) %>% 
    select( Position_ID = POSITION.ID, Pospay_ID = ALL.POSPAY, EffectiveDatetime) %>% 
    collect()

position <- getColleagueData( "POSITION" ) %>% 
    select( Position_ID = POSITION.ID, 
            Position_Supervisor_ID = POS.SUPERVISOR.POS.ID,
            Position_Title = POS.TITLE,
            Position_Short_Title = POS.SHORT.TITLE,
            Position_Type = POS.TYPE,
            Position_Class = POS.CLASS,
            EffectiveDatetime ) %>% 
    collect() %>% 
    left_join( position__all_pospay, by = join_by(Position_ID, EffectiveDatetime), multiple = "all" ) %>% 
    left_join( pospay, by = "Pospay_ID" ) %>% 
    filter( !is.na(Pospay_Start_Date) ) %>% 
    select( -c(Pospay_ID, EffectiveDatetime) )


perstat <- getColleagueData( "PERSTAT" ) %>% 
    select( HRP_ID = PERSTAT.HRP.ID, 
            Perstat_Start_Date = PERSTAT.START.DATE,
            Perstat_End_Date = PERSTAT.END.DATE ) %>% 
    filter( Perstat_Start_Date <= new_hire_end_date,
            coalesce(Perstat_End_Date,local(report_year_date)) >= new_hire_start_date ) %>% 
    collect()

perpos <- getColleagueData( "PERPOS" ) %>% 
    select( HRP_ID = PERPOS.HRP.ID,
            Position_ID = POSITION.ID,
            Perpos_Start_Date = PERPOS.START.DATE,
            Perpos_End_Date = PERPOS.END.DATE ) %>% 
    filter( Perpos_Start_Date <= new_hire_end_date,
            coalesce(Perpos_End_Date,local(report_year_date)) >= new_hire_start_date ) %>% 
    collect()

perposwg <- getColleagueData( "PERPOSWG" ) %>% 
    summarise( LAST_PAY_DATE = coalesce(max(PPWG.LAST.PAY.DATE),local(max_date)), 
               .by = c(PPWG.HRP.ID,  PPWG.PERPOS.ID),
               na.rm = TRUE ) %>% 
    select( PPWG_HRP_ID = PPWG.HRP.ID,
            PERPOSWG_PERPOS_ID = PPWG.PERPOS.ID,
            LAST_PAY_DATE ) %>% 
    filter( LAST_PAY_DATE >= local(new_hire_start_date) ) %>% 
    collect()

paytodat__ptdearn <- getColleagueData( "PAYTODAT__PTDEARN", version = "all" ) %>% 
    filter( PTD.PERIOD.DATE >= local(new_hire_start_date) ) %>% 
    select( PTD.EMPLOYEE.ID, Position_ID = PTD.POSITION.ID, PTD.PERIOD.DATE, PTD.PAY.CYCLE, PTD.SEQ.NO, EffectiveDatetime ) %>% 
    collect()

last_pay <- getColleagueData( "PAYTODAT" ) %>% 
    filter( PTD.CHECK.ADVICE.DATE != '', PTD.NET > 0 ) %>% 
    select( PTD.EMPLOYEE.ID, PTD.PERIOD.DATE, PTD.PAY.CYCLE, PTD.SEQ.NO, EffectiveDatetime ) %>% 
    collect() %>% 
    left_join( paytodat__ptdearn,
               by = join_by(PTD.EMPLOYEE.ID, PTD.PERIOD.DATE, PTD.PAY.CYCLE, PTD.SEQ.NO, EffectiveDatetime),
               multiple = "all" ) %>% 
    mutate( ID_POS = str_glue("{PTD.EMPLOYEE.ID}-{Position_ID}") )# %>% 

dates <- getColleagueData( "HRPER" ) %>% 
    select( HRP_ID = HRPER.ID ) %>% 
    collect() %>% 
    left_join( perstat, by = "HRP_ID", multiple = "all" ) %>% 
    left_join( perpos, by = "HRP_ID", multiple = "all" ) %>% 
    left_join( position, by = "Position_ID", multiple = "all" ) %>% 
    filter( !is.na(Position_ID) )

staging <- dates %>% 
    select( Campus_ID = HRP_ID, 
            Position_ID, 
            Perpos_Start_Date,
            Perpos_End_Date,
            Perstat_Start_Date,
            Perstat_End_Date,
            Pospay_Start_Date,
            Pospay_End_Date ) %>% 
    {
        df <- .
        bind_rows( 
            df %>%
                mutate( Start_Date = Perpos_Start_Date,
                        End_Date = Perpos_End_Date,
                        grouping = "POS" ),
            df %>%
                mutate( Start_Date = case_when( 
                    Perstat_Start_Date < Perpos_Start_Date ~ Perpos_Start_Date,
                    .default = Perstat_Start_Date ),
                    End_Date = case_when( 
                        Perstat_End_Date > Perpos_End_Date ~ Perpos_End_Date,
                        .default = Perstat_End_Date ), 
                    grouping = "STAT" ),
            df %>%
                mutate( Start_Date = case_when( 
                    Pospay_Start_Date < Perpos_Start_Date & 
                        Pospay_Start_Date < Perstat_Start_Date ~ case_when( 
                            Perpos_Start_Date > Perstat_Start_Date ~ Perpos_Start_Date,
                            .default = Perstat_Start_Date
                        ),
                    Pospay_Start_Date < Perpos_Start_Date ~ Perpos_Start_Date,
                    Pospay_Start_Date < Perstat_Start_Date ~ Perstat_Start_Date,
                    .default = Pospay_Start_Date ),
                    End_Date = case_when( 
                        Pospay_End_Date > Perpos_End_Date & 
                            Pospay_End_Date > Perstat_End_Date ~ case_when( 
                                Perpos_End_Date < Perstat_End_Date ~ Perpos_End_Date,
                                .default = Perstat_End_Date
                            ),
                        Pospay_End_Date > Perpos_End_Date ~ Perpos_End_Date,
                        Pospay_End_Date > Perstat_End_Date ~ Perstat_End_Date,
                        .default = Pospay_End_Date ),
                    grouping = "PAY" )
        )
    } %>% 
    filter( Start_Date <= coalesce(End_Date,max_date) )

dt2 <- staging %>% 
    mutate( Start_Date_left = Start_Date,
            End_Date_left = coalesce(End_Date,max_date) ) %>% 
    left_join( staging %>% 
                   mutate( Start_Date_right = Start_Date,
                           End_Date_right = coalesce(End_Date,max_date) ),
            by = join_by(Campus_ID, Position_ID, Start_Date, End_Date_left > Start_Date_right) ) %>% 
    select( Campus_ID, 
            Position_ID,
            grouping = grouping.x, 
            Start_Date,
            End_Date = End_Date_left,
            Perpos_Start_Date = Perpos_Start_Date.x,
            Perpos_End_Date = Perpos_End_Date.y,
            Perstat_Start_Date = Perstat_End_Date.x,
            Perstat_End_Date = Perstat_End_Date.y,
            Pospay_Start_Date = Pospay_Start_Date.x,
            Pospay_End_Date = Pospay_End_Date.y
            ) %>% 
    {
        df <- .
        
        df1 <- df %>%
            arrange( Campus_ID, Position_ID, Start_Date, End_Date ) %>% 
            mutate( row_nbr = row_number(), .by = c(Campus_ID,Position_ID,Start_Date) ) %>% 
            filter( row_nbr == 1, Start_Date <= coalesce(End_Date,Start_Date) )
        
        df1 
    }


##
## Now build the Personnel table
## 



valcodes_vals <- getColleagueData( "META__ALL_VALCODES__VALS", version="history" ) %>%
    filter( VALCODE.ID %in% validation_tables ) %>%
    select( VALCODE.ID,
            VAL.INTERNAL.CODE,
            VAL.EXTERNAL.REPRESENTATION,
            EffectiveDatetime ) %>%
    collect() %>%
    arrange( VALCODE.ID, VAL.INTERNAL.CODE )

valcodes <- getColleagueData( "META__ALL_VALCODES" ) %>%
    filter( VALCODE.ID %in% validation_tables ) %>%
    select( VALCODE.ID, EffectiveDatetime ) %>%
    collect() %>%
    inner_join( valcodes_vals, by = c("VALCODE.ID","EffectiveDatetime") ) %>%
    distinct() %>%
    select( -EffectiveDatetime ) %>%
    arrange( VALCODE.ID, VAL.INTERNAL.CODE )

depts <- getColleagueData( "DEPTS" ) %>%
    select( DEPT_ID = DEPTS.ID,
            DEPT_DESC = DEPTS.DESC,
            DEPT_DIVISION_ID = DEPTS.DIVISION,
            DEPTS_HEAD_ID = DEPTS.HEAD.ID ) %>% 
    collect()

eeo_cats <- getColleagueData( "EEO_CATEGORY" ) %>% 
    select( EEO_Category_Code = EEO.CATEGORY.ID,
            EEO_Category = EEO.DESC,
            EEO_Category_Heading = EEO.RPT.HEADING,
            EEO_Class_Code = EEO.RPT.CLASS ) %>% 
    collect() %>% 
    left_join( valcodes %>% 
                   filter(VALCODE.ID == "EEO.RPT.CLASSES") %>% 
                   select(EEO_Class_Code = VAL.INTERNAL.CODE,
                          EEO_Class = VAL.EXTERNAL.REPRESENTATION), 
               by = "EEO_Class_Code" )
    
        

#locations <- getColleagueData( "LOCATION" ) %>%
#    collect()

foreign_person <- getColleagueData( "FOREIGN_PERSON" ) %>%
    select( HRIW.EMP.PERSON.ID = FOREIGN.PERSON.ID, FPER.ALIEN.STATUS ) %>%
    collect()

perstat <- getColleagueData( "PERSTAT" ) %>%
    filter( PERSTAT.STATUS %in% c(hripeds_ft_statuses, hripeds_pt_statuses) ) %>%
    # filter( PERSTAT.STATUS %in% c(hripeds_ft_statuses, hripeds_pt_statuses),
    #         PERSTAT.START.DATE <= report_year_date,
    #         coalesce(PERSTAT.END.DATE,report_year_date) >= report_year_date ) %>%
    select( HRIW.EMP.PERSON.ID = PERSTAT.HRP.ID, 
            HRIW.PRIMARY.POSITION = PERSTAT.PRIMARY.POS.ID,
            HRIW.IPEDS.FUNCTION = PERSTAT.IPEDS.FUNCTION, 
            HRIW.EMPLOYEE.STATUS = PERSTAT.STATUS,
            HRIW.PERSTAT.START.DATE = PERSTAT.START.DATE,
            HRIW.PERSTAT.END.DATE = PERSTAT.END.DATE,
            HRIW.GRAD.ASSIST = PERSTAT.GRAD.ASSIST,
            HRIW.TENURE.TYPE = PERSTAT.TENURE.TYPE ) %>%
    collect() %>%
    mutate( HRIW.UNIQUE.KEY.IDX = str_c(HRIW.EMP.PERSON.ID,report_year,sep='*'),
            HRIW.IPEDS.FUNCTION = na_if(HRIW.IPEDS.FUNCTION,''), 
            HRIW.GRAD.ASSIST = na_if(HRIW.GRAD.ASSIST,'') )



# I don't think I need the dates
# hrper_perpos_info <- getColleagueData( "HRPER__PERPOS_INFO", version="history" ) %>%
#     select( HRIW.EMP.PERSON.ID = HRPER.ID, 
#             HRP.PERPOS.START.DATE,
#             HRP.PERPOS.END.DATE,
#             EffectiveDatetime ) %>%
#     collect() %>%
# For HRPER,
#    inner_join( hrper_perpos_info, by = c("HRIW.EMP.PERSON.ID","EffectiveDatetime") ) %>%

hrper_status_dates <- getColleagueData( "HRPER__STATUS_DATES", version="history" ) %>%
    # filter( HRP.PERSTAT.START.DATE <= report_year_date,
    #         coalesce(HRP.PERSTAT.END.DATE,report_year_date) >= report_year_date ) %>%
    select( HRIW.EMP.PERSON.ID = HRPER.ID, 
            EffectiveDatetime, 
            HRP.PERSTAT.START.DATE,
            HRP.PERSTAT.END.DATE ) %>%
    collect()

hrper <- getColleagueData( "HRPER" ) %>%
    select( HRIW.EMP.PERSON.ID = HRPER.ID, 
            EffectiveDatetime, 
            HRIW.EMPLOYMENT.DATE = HRP.EFFECT.EMPLOY.DATE,
            HRIW.PRIMARY.POSITION = HRP.PRI.POS ) %>%
    collect() %>%
    inner_join( hrper_status_dates, by = c("HRIW.EMP.PERSON.ID","EffectiveDatetime") ) %>%
    select( -EffectiveDatetime ) %>%
    distinct()

perpos <- getColleagueData( "PERPOS" ) %>%
    # filter( PERPOS.START.DATE <= report_year_date,
    #         coalesce(PERPOS.END.DATE,report_year_date) >= report_year_date ) %>%
    select( HRIW.EMP.PERSON.ID = PERPOS.HRP.ID,
            PERPOS.ID, 
            PERPOS.START.DATE, 
            PERPOS.END.DATE,
            HRIW.PRIMARY.POSITION = POSITION.ID,
            POSITION.ID = PERPOS.POSITION.ID,
            PERPOSWG.ID = XPERPOS.CURRENT.WAGE ) %>%
    collect() %>%
    mutate( PERPOS.END.DATE.ADJ = coalesce(PERPOS.END.DATE,current_date) ) 

perposwg <- getColleagueData( "PERPOSWG" ) %>%
    select( HRIW.EMP.PERSON.ID = PPWG.HRP.ID,
            HRIW.BASE.SALARY = PPWG.BASE.AMT,
            PPWG.CONTRACT.LENGTH, PPWG.CONTRACT.UNITS,
            HRIW.EXTRA.HOURLY.RATE = PPWG.WORK.UNIT.RATE,
            PERPOS.ID = PPWG.PERPOS.ID,
            PERPOSWG.ID,
            PPWG.YEAR.WORK.TIME.AMT, PPWG.YEAR.WORK.TIME.UNITS,
            PERPOS.START.DATE = PPWG.START.DATE, 
            PERPOS.END.DATE.ADJ = PPWG.END.DATE,
            HRIW.IPEDS.CONTRACT.TYPE = PPWG.IPEDS.CONTRACT.TYPE # Must be at the end
    ) %>%
    collect() %>%
    mutate( PERPOS.END.DATE.ADJ = coalesce(PERPOS.END.DATE.ADJ,current_date) ) %>%
    inner_join( perpos, by = c("HRIW.EMP.PERSON.ID","PERPOSWG.ID", "PERPOS.ID","PERPOS.START.DATE","PERPOS.END.DATE.ADJ")) %>%
    # filter( PPWG.START.DATE == PERPOS.START.DATE,
    #         PPWG.END.DATE == PERPOS.END.DATE ) %>%
    select( -c(PERPOSWG.ID, PERPOS.ID)) %>%
    mutate( HRIW.BASE.SALARY = coalesce(as.double(HRIW.BASE.SALARY),0)/100 ) %>%
    mutate( HRIW.IPEDS.CONTRACT.TYPE = if_else(HRIW.IPEDS.CONTRACT.TYPE=='',NA_character_,HRIW.IPEDS.CONTRACT.TYPE),
            Calculated_Base_Pay = case_when(
                HRIW.IPEDS.CONTRACT.TYPE == "AN" ~ 
                    case_when(
                        HRIW.BASE.SALARY==0 ~ 
                            case_when(
                                PPWG.YEAR.WORK.TIME.UNITS == 'H' ~ PPWG.YEAR.WORK.TIME.AMT*HRIW.EXTRA.HOURLY.RATE,
                                TRUE ~ HRIW.BASE.SALARY
                            ),
                        TRUE ~ HRIW.BASE.SALARY
                    ),
                TRUE ~ PPWG.YEAR.WORK.TIME.AMT * HRIW.EXTRA.HOURLY.RATE ),
            Calculated_12mo_Pay = case_when(
                HRIW.IPEDS.CONTRACT.TYPE == "AN" ~ Calculated_Base_Pay,
                PPWG.CONTRACT.UNITS == 'M' ~ 2080 * HRIW.EXTRA.HOURLY.RATE,
                TRUE ~ Calculated_Base_Pay ) )

person <- getColleagueData( "PERSON" ) %>%
    select( HRIW.EMP.PERSON.ID = ID, 
            FIRST.NAME, MIDDLE.NAME, LAST.NAME,
            HRIW.ETHNICITY = X.ETHNICS.RACES, 
            HRIW.GENDER = GENDER,
            PER.RACES, PER.ETHNICS ) %>%
    filter( !is.na(FIRST.NAME) ) %>%
    collect() %>%
    inner_join( hrper %>% select(HRIW.EMP.PERSON.ID) %>% distinct(), by = "HRIW.EMP.PERSON.ID" ) %>%
    mutate( HRIW.EMP.NAME.LFM = str_c( LAST.NAME, str_c(FIRST.NAME, MIDDLE.NAME, sep=' '), sep=", " ) ) %>%
    select( -c(FIRST.NAME, MIDDLE.NAME, LAST.NAME) )

position <- getColleagueData( "POSITION" ) %>%
    select( HRIW.PRIMARY.POSITION = POSITION.ID, 
            HRIW.ACADEMIC.RANK = POS.EEO.RANK,
            HRIW.SOC.CODE = POS.SOC.CODE,
            POS.CLASS,
            #ALL.POSPAY,
            POS.DEPT ) %>%
    collect() %>%
    mutate( HRIW.SOC.CODE = if_else(HRIW.SOC.CODE=='',NA_character_,HRIW.SOC.CODE) )

occup_categs <- getColleagueData( "SOC_CODES" ) %>%
    select( HRIW.SOC.CODE = SOC.CODES.ID, 
            HRIW.IPEDS.OCCUP.CATEG = SOC.IPEDS.OCCUP.CATEG ) %>%
    collect() 

course_sec_faculty <- getColleagueData( "COURSE_SEC_FACULTY" ) %>%
    select( SEC.FACULTY = COURSE.SEC.FACULTY.ID, HRIW.EMP.PERSON.ID = CSF.FACULTY ) %>%
    collect()

course_sections__sec_faculty <- getColleagueData( "COURSE_SECTIONS__SEC_FACULTY", version="history" ) %>%
    select( COURSE.SECTIONS.ID, SEC.FACULTY, EffectiveDatetime ) %>%
    collect() %>%
    left_join( course_sec_faculty, by = "SEC.FACULTY" ) %>%
    select( -SEC.FACULTY )

course_sections_last_date <- getColleagueData( "COURSE_SECTIONS" ) %>%
    filter( SEC.END.DATE <= courses_end_date, 
            SEC.STATUS %in% c('A') ) %>%
    select( COURSE.SECTIONS.ID, SEC.END.DATE, EffectiveDatetime ) %>%
    collect() %>%
    inner_join( course_sections__sec_faculty, by = c("COURSE.SECTIONS.ID","EffectiveDatetime") ) %>%
    group_by( HRIW.EMP.PERSON.ID ) %>%
    summarise( HRIW.EXTRA.LAST.COURSE.DATE = max(SEC.END.DATE) )

course_sections <- getColleagueData( "COURSE_SECTIONS" ) %>%
    filter( SEC.START.DATE >= courses_start_date,
            SEC.END.DATE <= courses_end_date, 
            SEC.STATUS %in% c('A') ) %>%
    select( COURSE.SECTIONS.ID, SEC.CRED.TYPE, EffectiveDatetime ) %>%
    collect() %>%
    inner_join( course_sections__sec_faculty, by = c("COURSE.SECTIONS.ID","EffectiveDatetime") ) %>%
    group_by( HRIW.EMP.PERSON.ID ) %>%
    summarise( All_Classes = n(),
               Credit_Classes = sum(if_else(SEC.CRED.TYPE %in% c("IN"), 1, 0)) ) %>%
    mutate( HRIW.CREDIT.CATEG = case_when(
        All_Classes == Credit_Classes & All_Classes > 0 ~ 'C',
        Credit_Classes == 0 & All_Classes > 0 ~ 'N',
        All_Classes > 0 ~ 'B',
        TRUE ~ NA_character_
    )) %>%
    select( HRIW.EMP.PERSON.ID, HRIW.CREDIT.CATEG )

hr_ipeds_work_active <- person %>%
    left_join( hrper, by = "HRIW.EMP.PERSON.ID" ) %>%
    mutate( HRP.PERSTAT.END.DATE.ADJ = coalesce(HRP.PERSTAT.END.DATE,current_date) ) %>%
    filter( HRP.PERSTAT.START.DATE <= report_year_date,
            HRP.PERSTAT.END.DATE.ADJ >= report_year_date ) %>%

    left_join( position, by = "HRIW.PRIMARY.POSITION" ) %>%
    
    left_join( perstat, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%
    mutate( HRIW.PERSTAT.END.DATE.ADJ = coalesce(HRIW.PERSTAT.END.DATE,current_date) ) %>%
    filter( #HRIW.PERSTAT.START.DATE <= report_year_date,
            #HRIW.PERSTAT.END.DATE.ADJ >= report_year_date,
            HRIW.PERSTAT.START.DATE == HRP.PERSTAT.START.DATE,
            HRIW.PERSTAT.END.DATE.ADJ == HRP.PERSTAT.END.DATE.ADJ
            ) %>%
    
    left_join( perpos, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%
    left_join( perposwg, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%

        filter( PERPOS.START.DATE == HRP.PERSTAT.START.DATE ) %>%
    
    select( -c(PERPOS.ID,PERPOSWG.ID) ) %>%
    distinct()
    
    filter( HRIW.PERSTAT.START.DATE <= report_year_date,
            coalesce(HRIW.PERSTAT.END.DATE,report_year_date) >= report_year_date )

hr_ipeds_work <- person %>%
    left_join( hrper, by = "HRIW.EMP.PERSON.ID" ) %>%
    left_join( position, by = "HRIW.PRIMARY.POSITION" ) %>%
    left_join( perstat, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%
    left_join( perpos, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%
    left_join( perposwg, by = c("HRIW.EMP.PERSON.ID","HRIW.PRIMARY.POSITION") ) %>%
    left_join( occup_categs, by = "HRIW.SOC.CODE" ) %>%
    left_join( course_sections, by = "HRIW.EMP.PERSON.ID" ) %>%
    left_join( course_sections_last_date, by = "HRIW.EMP.PERSON.ID" ) %>%
    mutate( HRIW.RPT.YEAR = report_year,
            HRIW.MEDICAL.IND = case_when(
                hripeds_medical_ind == 'Y' & POS.DEPT %in% hripeds_meds_values ~ 'Y',
                TRUE ~ NA_character_ ),
            HRIW.FACULTY.STATUS.FLAG = case_when(
                POS.CLASS %in% hripeds_faculty_class ~ 'Y',
                TRUE ~ NA_character_ ),
            HRIW.PRIMARY.POSITION = if_else(HRIW.PRIMARY.POSITION=='',NA_character_,HRIW.PRIMARY.POSITION),
            HRIW.IPEDS.FUNCTION = if_else(HRIW.IPEDS.FUNCTION=='',NA_character_,HRIW.IPEDS.FUNCTION),
            HRIW.EXTRA.HOURLY.RATE = if_else(HRIW.EMPLOYEE.STATUS %in% hripeds_pt_statuses,
                                             NA_real_,
                                             as.double(HRIW.EXTRA.HOURLY.RATE) ) ) %>%
    mutate( HRIW.BASE.SALARY = if_else(HRIW.EMPLOYEE.STATUS %in% hripeds_ft_statuses, 
                                       if_else(coalesce(as.double(HRIW.BASE.SALARY),0.0)==0.0,
                                               Calculated_Base_Pay, as.double(HRIW.BASE.SALARY)/100 ),
                                       NA_real_),
            HRIW.ACADEMIC.RANK = 6,
            HRIW.CONTRACT.MONTHS = case_when(
                HRIW.IPEDS.FUNCTION %in% c("IO","IC") & HRIW.MEDICAL.IND %in% c('','N',NA_character_) ~ 
                    if_else( PPWG.CONTRACT.UNITS == 'M', as.integer(PPWG.CONTRACT.LENGTH), NA_integer_ ),
                TRUE ~ NA_integer_ ),
            HRIW.IPEDS.CONTRACT.TYPE = case_when(
                hripeds_tenure_system == 'N' ~ HRIW.IPEDS.CONTRACT.TYPE,
                hripeds_tenure_system == 'Y' & HRIW.TENURE.TYPE != 'T' ~ HRIW.IPEDS.CONTRACT.TYPE,
                TRUE ~ NA_character_ ),
            HRIW.NEW.HIRE.FLAG = case_when(
                HRIW.PERSTAT.START.DATE >= new_hire_start_date & 
                    (coalesce(HRIW.PERSTAT.END.DATE,report_year_date+1) > report_year_date) ~ 'Y',
                TRUE ~ NA_character_ ),
            HRIW.TENURE.TYPE = case_when(
                hripeds_tenure_system == 'N' ~ NA_character_,
                TRUE ~ '' ),
            HRIW.CREDIT.CATEG = if_else(HRIW.FACULTY.STATUS.FLAG == 'Y',HRIW.CREDIT.CATEG,NA_character_)
            ) %>%
    select( HRIW.EMP.PERSON.ID, HRIW.EMP.NAME.LFM,
            HRIW.ACADEMIC.RANK,
            HRIW.BASE.SALARY,
            HRIW.CONTRACT.MONTHS,
            HRIW.CREDIT.CATEG,
            HRIW.EMPLOYEE.STATUS,
            HRIW.EMPLOYMENT.DATE,
            HRIW.ETHNICITY,
            HRIW.FACULTY.STATUS.FLAG,
            HRIW.GENDER,
            HRIW.GRAD.ASSIST,
            HRIW.IPEDS.CONTRACT.TYPE,
            HRIW.IPEDS.FUNCTION,
            HRIW.IPEDS.OCCUP.CATEG,
            HRIW.MEDICAL.IND,
            HRIW.NEW.HIRE.FLAG,
            HRIW.PERSTAT.END.DATE,
            HRIW.PERSTAT.START.DATE,
            HRIW.PRIMARY.POSITION,
            HRIW.RPT.YEAR,
            HRIW.SOC.CODE,
            HRIW.TENURE.TYPE,
            HRIW.UNIQUE.KEY.IDX,
            HRIW.EXTRA.HOURLY.RATE,
            HRIW.EXTRA.LAST.COURSE.DATE,
            HRIW.EXTRA.YEAR.WORK.TIME.UNITS = PPWG.YEAR.WORK.TIME.UNITS,
            HRIW.EXTRA.YEAR.WORK.TIME.AMT = PPWG.YEAR.WORK.TIME.AMT
            ) %>%
    arrange( HRIW.EMP.PERSON.ID ) %>%
    distinct()

#####
#####
#
# VALIDATION CHECKS
#
####
####

error_checks <- hr_ipeds_work %>%
    mutate( ERROR01 = !(as.character(HRIW.ACADEMIC.RANK) %in% c(valcodes %>% filter(VALCODE.ID=='EEO.RPT.RANKS') %>% collect %$% VAL.INTERNAL.CODE) ),
            ERROR02 = (HRIW.EMPLOYEE.STATUS %in% hripeds_ft_statuses & coalesce(HRIW.BASE.SALARY,0) == 0),
            #ERROR03 = "XXXX",
            ERROR04 = (coalesce(HRIW.FACULTY.STATUS.FLAG,'N') == 'Y' & coalesce(HRIW.CREDIT.CATEG,'Z') %nin% c('C','N','B') ),
            ERROR05 = (coalesce(HRIW.IPEDS.OCCUP.CATEG,"XX") == "05" & coalesce(HRIW.IPEDS.FUNCTION,"XX") == "XX"),
            ERROR06 = (coalesce(HRIW.IPEDS.OCCUP.CATEG,"XX") != "05" & coalesce(HRIW.IPEDS.FUNCTION,"XX") != "XX"),
            ERROR07 = (coalesce(HRIW.IPEDS.OCCUP.CATEG,"XX")=="XX"),
            #ERROR08 = "XXXX",
            ERROR09 = (coalesce(HRIW.SOC.CODE,"XX-XXXX")=="XX-XXXX"),
            ERROR10 = (hripeds_tenure_system == 'Y' & (HRIW.TENURE.TYPE %in% c(valcodes %>% filter(VALCODE.ID=='TENURE.TYPES') %>% collect %$% VAL.INTERNAL.CODE)) ),
            #ERROR11 = "XXXX",
            ERROR12 = (HRIW.EMPLOYEE.STATUS %in% hripeds_ft_statuses & coalesce(HRIW.BASE.SALARY,0) == 0 & coalesce(HRIW.EXTRA.YEAR.WORK.TIME.AMT,0.0)==0.0),
            ERROR13 = (HRIW.EMPLOYEE.STATUS %in% hripeds_ft_statuses & coalesce(HRIW.BASE.SALARY,0) == 0 & (HRIW.EXTRA.YEAR.WORK.TIME.UNITS %in% c(valcodes %>% filter(VALCODE.ID=='TIME.UNITS') %>% collect %$% VAL.INTERNAL.CODE)) )
            ) %>%
    #select( HRIW.EMP.PERSON.ID, HRIW.ACADEMIC.RANK, HRIW.SOC.CODE, HRIW.TENURE.TYPE, starts_with("ERROR") ) %>%
    mutate( ERROR07 = if_else(ERROR07 & ERROR09,FALSE,ERROR07) ) %>%
    pivot_longer( starts_with("ERROR") ) %>%
    filter( value == TRUE ) %>%
    mutate( Error_Message = case_when(
        name == "ERROR01" ~ str_c("E01: Academic Rank", HRIW.ACADEMIC.RANK, "must exist in the EEO.RPT.RANKS validation table with an action code between 1 and 6.", sep=" "),
        name == "ERROR02" ~ "E02: Annual wage amount must not be equal to zero.",
        name == "ERROR03" ~ "E03: Could not determine a value for FIELD.NAME.",
        name == "ERROR04" ~ str_c("E04: Faculty member is not currently teaching any courses. Last course ended on",coalesce(as.character(HRIW.EXTRA.LAST.COURSE.DATE),"<Unknown>"),".",sep=' '),
        name == "ERROR05" ~ "E05: IPEDS Function is required if the IPEDS Occupational Category for the SOC Code is Postsecondary Teacher.",
        name == "ERROR06" ~ "E06: IPEDS Function should not be specified if the SOC Code is not a Postsecondary Teacher.",
        name == "ERROR07" ~ str_c("E07: ",coalesce(HRIW.SOC.CODE,"<unknown SOC Code>"),"is missing IPEDS Occupational Category, which could not be determined for employees with this SOC Code.", sep=" "),
        name == "ERROR08" ~ str_c("E08: PERSTAT","NNNN","cannot be processed without an Employee ID.", sep=" "),
        name == "ERROR09" ~ str_c("E09: ",HRIW.EMP.PERSON.ID,"is missing SOC Code. Unable to determine IPEDS Occupational Category for employees in this position.", sep=" "),
        name == "ERROR10" ~ str_c("E10: Tenure Type",HRIW.TENURE.TYPE,"must exist in the TENURE.TYPES validation table with an action code.", sep=" "),
        name == "ERROR11" ~ "E11: The HRIP form does not contain enough information to build the IPEDS work files. Go to the HRIP form and enter all required information.",
        name == "ERROR12" ~ "E12: Yearly Work Time must be specified with an hourly unit so that an annual pay amount may be calculated.",
        name == "ERROR13" ~ "E13: Yearly Work Time must be specified with an hourly unit so that an annual pay amount may be calculated.",
        TRUE ~ "Unknown ERROR"
    )) %>%
    select( -c(name,value) )
    group_by( HRIW.EMP.PERSON.ID ) %>%
    summarize( Error_Message = str_c( Error_Message, collapse = "; " ) )
```

```{r write-output}
#| echo: false
#| include: false

if (WRITE_OUTPUT) {
#    write.table( data.frame(ipeds_hr1_a), file.path(output_path, fn_output), sep="", col.names = FALSE, row.names = FALSE, quote=FALSE  )
#    write.table( data.frame(ipeds_hr2_b), file.path(output_path, fn_output), sep="", col.names = FALSE, row.names = FALSE, quote=FALSE, append=TRUE  )
}

if (TEST) {
    #write_csv( XXXX, file.path(output_path, str_c(fn_report_code,"_group1_",report_year,".csv")), na = "")
    write_csv( hr_ipeds_work, file.path(output_path, str_c(fn_report_code,"_hr_ipeds_work_",report_year,".csv")), na = "")
    write_csv( error_checks, file.path(output_path, str_c(fn_report_code,"_error_checks_",report_year,".csv")), na = "")
}
```